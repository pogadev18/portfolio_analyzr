import Head from 'next/head';
import { useRouter } from 'next/router';
import { GetServerSidePropsContext } from 'next';

import { requireAuth } from '@/root/utils/requireAuth';
import { trpc } from '@/root/utils/trpc';
import { oneDayInMs } from '@/root/constants';
import LoadingSpinner from '@/root/components/loadingSpinner';

const PortfolioPage = () => {
  const router = useRouter();
  const { id } = router.query;

  // get all investment years
  const { data: investmentYears, isLoading: loadingInvestmentYears } =
    trpc.investmentYear.getAll.useQuery({ portfolioId: id as string }, { staleTime: oneDayInMs });

  // get all investments
  const {
    data: investments,
    isLoading: loadingInvestments,
    isError,
  } = trpc.investment.getAll.useQuery(
    { portfolioId: id as string },
    {
      staleTime: oneDayInMs, // 24h (keep portfolios fresh for 24h)
    },
  );

  if (loadingInvestments) return <LoadingSpinner />;

  if (isError)
    return (
      <p>
        something went wrong while trying to get data from this portfolio. Make sure this portfolio
        exists, if not, create one here.
      </p>
    );

  return (
    <>
      <Head>
        <title>ETFs Portfolio Analyzr | Portfolio</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Portfolio Page</h1>
        <p>
          Every portfolio is divided in multiple investment years and for each investment year,
          <br /> you can add multiple investments. Therefore, before adding any investments, add an
          investment year first.
        </p>

        <button
          onClick={() => router.push(`/portfolio/${id}/new-investment-year`)}
          className="my-3 mr-3 rounded bg-red-800 p-3 text-white hover:bg-red-500"
        >
          add investment year
        </button>

        <button
          onClick={() => router.push(`/portfolio/${id}/new-investment`)}
          className="my-3 rounded bg-red-800 p-3 text-white hover:bg-red-500"
        >
          add investment
        </button>

        <section className="flex p-10">
          <ul className="years-list">
            {investmentYears?.length ? (
              <>
                <li>
                  <button
                    type="button"
                    className="w-32 rounded bg-amber-500 p-5 hover:bg-amber-200"
                  >
                    all
                  </button>
                </li>
                {investmentYears?.map((year) => (
                  <li key={year.id}>
                    <button
                      type="button"
                      className="my-2 w-32 rounded bg-amber-500 p-5 hover:bg-amber-200"
                    >
                      {year.year}
                    </button>
                  </li>
                ))}
              </>
            ) : null}
          </ul>
          {investmentYears?.length && (
            <div className="pie-chart px-10">
              <h2 className="text-3xl font-bold">Pie Chart</h2>
            </div>
          )}
        </section>
      </main>
    </>
  );
};

export async function getServerSideProps(context: GetServerSidePropsContext) {
  return await requireAuth(context, ({ session }) => {
    return {
      props: { session },
    };
  });
}

export default PortfolioPage;
